version: 2.1

orbs:
  node: circleci/node@5.0.2
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@3.2.0

# the default pipeline parameters, which will be updated according to
# the results of the path-filtering orb
parameters:
  build-be:
    type: boolean
    default: false

jobs:
  test-be:
    executor: 
      name: node/default
      tag: '14.17'
    steps:
      - checkout
      - node/install-packages:
          app-dir: "~/project/branch-be"
          pkg-manager: yarn
      - run: 
          command: cd branch-be && yarn run test
      - run: 
          command: cd branch-be && yarn run coverage
      - store_artifacts:
          path: ~/project/branch-be/test-reports
      - store_test_results:
          path: ~/project/branch-be/test-results           

# here we specify our workflows, most of which are conditionally
# executed based upon pipeline parameter values. Each workflow calls a
# specific job defined above, in the jobs section.
workflows:
  # when pipeline parameter, run-build-service-1-job is true, the
  # build-service-1 job is triggered.
  service-1:
    when: << pipeline.parameters.build-be >>
    jobs:
      - test-be
      - aws-ecr/build-and-push-image:
          dockerfile: Dockerfile
          path: branch-be/
          extra-build-args: '--target production -build-arg DBHOST=${DBHOST} --build-arg DBUSER=${DBUSER} --build-arg DBPASSWORD=${DBPASSWORD}'
          requires:
            - test-be
          repo: ${MY_APP_PREFIX}
          tag: '${CIRCLE_SHA1}'
          filters:
            branches:
              only: main
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image # only run the deployment job once the build and push image job has completed
          family: '${TASK_NAME}'
          cluster: '${CLUSTER_NAME}'
          service-name: '${SERVICE_NAME}'
          container-image-name-updates: 'container=${TASK_NAME}_container,tag=${CIRCLE_SHA1}'
          filters:
            branches:
              only: main
          
          
        
  